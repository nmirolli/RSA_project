#########################################################################
#									#
# README.txt file for RSA_Crypt.java					#
# Created by Nicholas Mirolli Sept. 2013				#
# Copyright (c) 2013 Mirolli						#
# 									#
# This file includes a clear description of how to run RSA_Crypt.java,	#
# a high-level explaination of the source code behind the program, and 	#
# some notable features and experiences while writing RSA_Crypt.java.	#
#									#
#########################################################################

=========================================================================
HOW TO RUN RSA_CRYPT.JAVA
=========================================================================
1) Run RSA_Crypt.java
	This can be done by opening the project in a Java IDE, then 
building/compiling the code, and running the project.  It is recommended 
that Eclipse be used for this as Eclipse is what was used to write the 
program and RSA_Crypt.java has been tested extensively using Eclipse.  
Although any properly set up Java IDE should work fine.

2) Upon running the program the user will be prompted to do the 
following:
	"Enter 0 for Encryption or 1 for Decryption"
In order to Encrypt a message and receive values for n, d, and ciphertext
users should select 0.  In order to Decrypt a ciphertext and receive the
original message users should select 1.  If neither 0 nor 1 are selected
the program will return an error message and prompt the user to re-run
the program.  

3) If encryption is selected the user will be prompted for the following: 
	"Size (in digits) of p"
	"Size (in digits) of q"
	"Size (in digits) of e"
	"Size (number of characters) of each block"
	"Message to be encrypted"
The message can be of any length due to the fact that this implementation
uses block encryption, but in order for a successful and accurate run
the user must specify a block size that is smaller than n divided by 3.
n is estimated to be the size of p specified by the user plus the size of
q specified by the user.  It is suggested that the user choose a small 
block size such as a single digit number, but it is not necessary if n
is very large.
***NOTE*** IF DECRYPTION IS SELECTED JUMP TO STEP 6

4) After inputing the information stated above, the program will return
the value of p, q, n, phi_n, e, and d.  In order to make sure that the
correct message was entered by the user the program will also repeat the
message back to the user as "Message before encryption: ..." The program
will then print to the screen the plaintext version of the original
message.  Next the ciphertext is printed to the screen and the program
ends.

5) Open a text editior such as notepad in order to write down the values
of n, d, and the ciphertext.  As these numbers can be very large it is 
recommended that the COPY/PASTE function be used.
***NOTE*** DO NOT INCLUDE ANY WHITESPACE BEFORE THE FIRST DIGIT OR AFTER
THE LAST DIGIT IN ANY OF THESE NUMBERS/CIPHERTEXTS. DOING SO WILL RESULT
AS THE PROGRAM WILL RESULT IN AN IMPROPERLY DECRYPTED MESSAGE OR AN ERROR.
***NOTE*** IT IS OF EXTREME IMPORTANCE THAT WORD WRAP IS DISABLED IN BOTH 
THE IDE AND THE TEXT EDITOR AS WORD WRAP WILL ADD IN EXTRA NEW LINES
RESULTING IN AN IMPORPERLY DECRYPTED MESSAGE OR AN ERROR.

6) To decrypt a message, simply run the program again, this time selecting
1 to decrypt a message instead of 0 to encrypt. The user will then be 
prompted for the following:
	"Message to be decrypted"
	"Value of d"
	"Value of n"
The program will then decrypt the cipher text using the values of n and 
d provided.  The program will print the plaintext message back as output
"Plaintext after decryption: ..." The plaintext is then converted back to 
characters and the original message will be printed as output
"Message after decryption: ..."

Following these instructions will result in successful encryption of a
message to a ciphertext and successful decryption of the ciphertext back
to the original message.  
***NOTE*** This program is intended to be run twice, once for encryption,
once for decryption in order to simulate two seperate users sending
messages to each other.

=========================================================================
Explaination of source code
=========================================================================
Different types used in RSA_Crypt.java include:
	int, double, string, char, BigInteger, Random, StringBuilder, 
BigInteger[], String[], void, and Scanner.

p, q, n, phi_n, e, and d are all of type BigInteger in order to handle the
large numbers being generated by this program.  p and q are randomly 
generated prime numbers that pass the fermats test for primality.  n is 
the product of p and q.  phi_n is the product of p-1 and q-1. e is 
relatively prime to phi_n and is not equal to phi_n.  d is the 
multiplicative inverse of e.  The user specifies the size of p, q, and e. 
The program will print out all the values above, in order to let the user
see that the values are correct (or look reasonably correct to to the eye.)

Next this program will prompt the user to enter the size of each block. 
The block size is used to break the message into blocks before encryption.
After that the program asks the user to enter the message to be encrypted.
The message is scanned in from input and saved in a String Bmessage.  The 
program will transform each character of the original message into its 
ascii equivalent using a loop.  If the ascii value of the character is less 
than 100 (less than 3 digits) the program will pad a 9 to the beginning of 
the ascii value so that each character's ascii equivalent is 3 digits long.
This ascii version of the message will be saved into a BigInteger Bplaintext.

The program will then loop through Bplaintext and break the message into 
blocks according to the block size specified by the user eariler in the 
program.  Each block is then encryped to form blocks of ciphertext. The 
ciphertext blocks are then concatinated together to form a complete ciphertext
of the original message with a space padded in between each block of the text.
The ciphertext is then printed to the screen for decryption later and the 
program ends.  

The decryption begins when the user runs the program again and selects the 
decryption option.  The program will ask for n, d, and the ciphertext
message from the previous run of the program.  The ciphertext message is 
read into a String.  The program then uses the string.split() function to
split the large String into an array of Strings with each string being a 
block of ciphertext.  Each element of the array is transformed into a BigInteger and decrypted in the same loop using the Decryption() function 
which takes arguments n, d, and the ciphertext block.  After decryption of 
all the blocks, the plaintext blocks are converted into a String and 
concatinated together to form the original plaintext stored in Aplaintext.
Aplaintext is then converted from ascii values back into the character 
equivalents.  The program also makes sure to subtract the leading 9 padded
to each of the ascii values that were originally less that 100 (3 digits).  
Each character is then appended together using a string builder and the final
string is reversed, in order to put the string into the order of the original
message.

The original message has been transformed into plaintext, encrypted into 
ciphertext, then decrypted back into plaintext and transformed back into the
original message.  

=========================================================================
Notable features and interesting experiences
=========================================================================
Notable features of this program include:
	The ability to handle large values for size of p, q, and e.
	The ability to encrypt large messages using small values of
p, and q due to the block encryption method.  
	The call to Fermats test can be modified to have a larger certainty
to make sure that the prime numbers generated are in fact prime.

Interesting experiences include:
	Normal RSA encryption does not allow for the ability to block encrypt 
due to the fact that RSA is asymmetric encryption and block encryption is 
primarily used in symmetric encrytion.  This is due to the plaintext and the
ciphertext being of the same size so that there is no need to pad the 
ciphertext with a space to show where the blocks are.  
